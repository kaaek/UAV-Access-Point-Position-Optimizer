%%
% author: Khalil El Kaaki & Joe Abi Samra
% 23/10/2025
%%

clc, clearvars
addpath("util\");

rng(42);                % Generator seed

M           = 50;       % Users
N           = 5;        % UAVs
AREA        = 250000;    % meters squared
H           = 100;      % height, meters
H_M         = 1.5;
F           = 500e6;    % Hz
K           = 30;       % dB
GAMMA       = 3;        
D_0         = 1;        % meters
P_T         = 30;       % dBm
P_N         = -91;      % dBm 
MAX_ITER    = 50;
TOL         = 1e-3;     % Tolerance for k-means convergence
BW_total    = 40e6;     % Hz
Rmin        = 0.2E6;    % Set minimum bit rate
user_pos    = ceil(sqrt(AREA)) * rand(2, M); 

% 1. N sweep
N_vals = [2 3 4 5 6 8];
sumlink_mbps_kmeans = zeros(length(N_vals), 1);
sumlink_mbps_grid = zeros(length(N_vals), 1);
sumlink_mbps_random = zeros(length(N_vals), 1);
sumlink_mbps_fm_kmeans = zeros(length(N_vals), 1);
sumlink_mbps_fm_grid = zeros(length(N_vals), 1);
sumlink_mbps_fm_random = zeros(length(N_vals), 1);
for i = 1:length(N_vals)
    n = N_vals(i);
    % [sumlink_mbps_kmeans, sumlink_mbps_grid, sumlink_mbps_random, sumlink_mbps_fm_kmeans, sumlink_mbps_fm_grid, sumlink_mbps_fm_random] = analysis(M, n, AREA, H, K, GAMMA, D_0, P_T, P_N, MAX_ITER, TOL, BW_total, Rmin, user_pos);
    [sumlink_mbps_kmeans, sumlink_mbps_grid, sumlink_mbps_random, sumlink_mbps_fm_kmeans, sumlink_mbps_fm_grid, sumlink_mbps_fm_random] = analysis(M, n, AREA, H_M, H, F, P_T, P_N, MAX_ITER, TOL, BW_total, Rmin, user_pos);
    sumlink_mbps_kmeans(i) = sumlink_mbps_kmeans;
    sumlink_mbps_grid(i) = sumlink_mbps_grid;
    sumlink_mbps_random(i) = sumlink_mbps_random;
    sumlink_mbps_fm_kmeans(i) = sumlink_mbps_fm_kmeans;
    sumlink_mbps_fm_grid(i) = sumlink_mbps_fm_grid;
    sumlink_mbps_fm_random(i) = sumlink_mbps_fm_random;
end

figure('Name', 'Variation of Bitrate With Number of UAVs');
hold on;
plot(N_vals, sumlink_mbps_kmeans, '-o', 'DisplayName', 'K-Means');
plot(N_vals, sumlink_mbps_grid, '-s', 'DisplayName', 'Grid');
plot(N_vals, sumlink_mbps_random, '-d', 'DisplayName', 'Random');
plot(N_vals, sumlink_mbps_fm_kmeans, '-^', 'DisplayName', 'K-Means Optimized');
plot(N_vals, sumlink_mbps_fm_grid, '-v', 'DisplayName', 'Grid Optimized');
plot(N_vals, sumlink_mbps_fm_random, '-x', 'DisplayName', 'Random Optimized');
hold off;

title('Bitrate vs Number of UAVs');
xlabel('Number of UAVs (N)');
ylabel('Bitrate (Mbps)');
legend('show');
grid on;

% % If for one N:
% % 1. Baseline solution (K-means)
% [uav_pos_kmeans, br_kmeans, sumlink_mbps_kmeans] = kMeansSol(user_pos, M, N, AREA, H_M, H, F, P_T, P_N, MAX_ITER, TOL, BW_total);

% figure;
% subplot(1, 2, 1);
% scatter(user_pos(1, :), user_pos(2, :), 'b', 'filled');
% hold on;
% scatter(uav_pos_kmeans(1, :), uav_pos_kmeans(2, :), 'r', 'filled');
% title('Users and K-Means UAV Locations');
% xlabel('X Position (meters)');
% ylabel('Y Position (meters)');
% legend('Users', 'UAVs');
% grid on;
% 
% subplot(1, 2, 2);
% bar(br_kmeans(:));
% title('K-Means Bit Rate per User');
% xlabel('User Index');
% ylabel('Baseline Bit Rate (bps)');
% grid on;

% % 2. Another baseline: grid placement
% [uav_pos_grid, br_grid, sumlink_mbps_grid] = gridSol(user_pos, M, N, AREA, H_M, H, F, P_T, P_N, BW_total);

% figure;
% subplot(1, 2, 1);
% scatter(user_pos(1, :), user_pos(2, :), 'b', 'filled');
% hold on;
% scatter(uav_pos_grid(1, :), uav_pos_grid(2, :), 'r', 'filled');
% title('Users and Grid UAV Locations');
% xlabel('X Position (meters)');
% ylabel('Y Position (meters)');
% legend('Users', 'UAVs');
% grid on;
% 
% subplot(1, 2, 2);
% bar(br_grid(:));
% title('Grid Bit Rate per User');
% xlabel('User Index');
% ylabel('Baseline Bit Rate (bps)');
% grid on;

% % 3. Another baseline: Random UAV positions
% [uav_pos_random, baseline_br, sumlink_mbps_random] = randomSol(user_pos, M, N, AREA, H_M, H, F, P_T, P_N, BW_total, Rmin);

% figure;
% subplot(1, 2, 1);
% scatter(user_pos(1, :), user_pos(2, :), 'b', 'filled');
% hold on;
% scatter(uav_pos_random(1, :), uav_pos_random(2, :), 'r', 'filled');
% title('Users and Random UAV Locations');
% xlabel('X Position (meters)');
% ylabel('Y Position (meters)');
% legend('Users', 'UAVs');
% grid on;
% 
% subplot(1, 2, 2);
% bar(baseline_br(:));
% title('Random Bit Rate per User');
% xlabel('User Index');
% ylabel('Baseline Bit Rate (bps)');
% grid on;

% % 4. Optimize UAV positions (Global Search, built on top of fmincon)
% uav_pos_gs_kmeans   = optimizeUAVPositions(N, AREA, uav_pos_kmeans, user_pos, H_M, H, F, P_T, P_N, BW_total, Rmin);
% uav_pos_gs_grid     = optimizeUAVPositions(N, AREA, uav_pos_grid, user_pos, H_M, H, F, P_T, P_N, BW_total, Rmin);
% uav_pos_gs_random   = optimizeUAVPositions(N, AREA, uav_pos_random, user_pos, H_M, H, F, P_T, P_N, BW_total, Rmin);

% % 5. Optimize Bandwidth allocation (fmincon)
% uav_pos_gs_kmeans = uav_pos_gs_kmeans.';   % now 2Ã—N (transpose)
% uav_pos_gs_grid = uav_pos_gs_grid.';
% uav_pos_gs_random = uav_pos_gs_random.';
% [~, br_kmeans, sumlink_mbps_fm_kmeans]   = optimizeBandwidthAllocation(M, BW_total, user_pos, uav_pos_gs_kmeans, H_M, H, F, P_T, P_N, Rmin);
% [~, br_grid, sumlink_mbps_fm_grid]       = optimizeBandwidthAllocation(M, BW_total, user_pos, uav_pos_gs_grid, H_M, H, F, P_T, P_N, Rmin);
% [~, br_random, sumlink_mbps_fm_random]   = optimizeBandwidthAllocation(M, BW_total, user_pos, uav_pos_gs_random, H_M, H, F, P_T, P_N, Rmin);

% figure;
% 
% subplot(1, 2, 1);
% scatter(user_pos(1,:), user_pos(2,:), 'b', 'filled');
% hold on;
% scatter(uav_pos_gs_kmeans(1,:), uav_pos_gs_kmeans(2,:), 'r', 'filled');
% xlabel('X Position (meters)');
% ylabel('Y Position (meters)');
% title('User and Optimized UAV Positions (K-Means Starting Point)');
% legend('Users', 'UAVs');
% grid on;
% hold off;
% 
% subplot(1, 2, 2);
% bar(br_kmeans);
% title('Optimized Bit Rate per User (K-means Starting Point)');
% xlabel('User Index');
% ylabel('Bit Rate (bps)');
% grid on;
% 
% figure;
% 
% subplot(1, 2, 1);
% scatter(user_pos(1,:), user_pos(2,:), 'b', 'filled');
% hold on;
% scatter(uav_pos_gs_grid(1,:), uav_pos_gs_grid(2,:), 'r', 'filled');
% xlabel('X Position (meters)');
% ylabel('Y Position (meters)');
% title('User and Optimized UAV Positions (Grid Starting Points)');
% legend('Users', 'UAVs');
% grid on;
% hold off;
% 
% subplot(1, 2, 2);
% bar(br_grid);
% title('Optimized Bit Rate per User (Grid Starting Points)');
% xlabel('User Index');
% ylabel('Bit Rate (bps)');
% grid on;
% 
% figure;
% 
% subplot(1, 2, 1);
% scatter(user_pos(1,:), user_pos(2,:), 'b', 'filled');
% hold on;
% scatter(uav_pos_gs_random(1,:), uav_pos_gs_random(2,:), 'r', 'filled');
% xlabel('X Position (meters)');
% ylabel('Y Position (meters)');
% title('User and Optimized UAV Positions (Random Starting Points)');
% legend('Users', 'UAVs');
% grid on;
% hold off;
% 
% subplot(1, 2, 2);
% bar(br_random);
% title('Optimized Bit Rate per User (Random Starting Points)');
% xlabel('User Index');
% ylabel('Bit Rate (bps)');
% grid on;

fprintf('--------------------------------------------------\n');
fprintf(' BASELINE SOLUTIONS \n');
fprintf('--------------------------------------------------\n');
fprintf('Sum of k-means bit rate: %.2f Mbps.\n', sum(sumlink_mbps_kmeans));
fprintf('Sum of grid-placement bit rate: %.2f Mbps.\n', sum(sumlink_mbps_grid));
fprintf('Sum of random-placement bit rate: %.2f Mbps.\n', sum(sumlink_mbps_random));
fprintf('--------------------------------------------------\n');
fprintf(' OPTIMIZED SOLUTIONS \n');
fprintf('--------------------------------------------------\n');
fprintf('Sum of k-mens bit rate after optimization: %.2f Mbps\n', sum(sumlink_mbps_fm_kmeans));
fprintf('Sum of grid-placement bit rate after optimization: %.2f Mbps\n', sum(sumlink_mbps_fm_grid));
fprintf('Sum of random-placement bit rate after optimization: %.2f Mbps\n', sum(sumlink_mbps_fm_random));
fprintf('--------------------------------------------------\n');

% H sweep
H_vals = [50 100 150 200 250];
for i = 1:length(H_vals)
    h = H_vals(i);
    analysis(M, N, AREA, H_M, h, F, P_T, P_N, MAX_ITER, TOL, BW_total, Rmin, user_pos);
end
